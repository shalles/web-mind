import { v4 as uuidv4 } from 'uuid';
import { MindNode, NodeStyle } from '@/types/mindmap';

export class MindMapModel {
  // 默认节点样式
  private static defaultNodeStyle: NodeStyle = {
    backgroundColor: '#ffffff',
    borderColor: '#cccccc',
    borderWidth: 1,
    borderStyle: 'solid',
    borderRadius: 4,
    padding: 8,
    fontSize: 14,
    fontColor: '#333333',
  };

  // 创建新节点
  static createNode(content: string, parentId?: string, level: number = 0): MindNode {
    return {
      id: uuidv4(),
      content,
      children: [],
      parent: parentId,
      style: { ...this.defaultNodeStyle },
      expanded: true,
      level,
    };
  }

  // 添加子节点
  static addChild(parent: MindNode, content: string): MindNode {
    const newNode = this.createNode(content, parent.id, parent.level + 1);
    parent.children.push(newNode);
    return newNode;
  }

  // 删除节点
  static removeNode(nodes: MindNode[], nodeId: string): MindNode[] {
    return nodes.filter(node => {
      if (node.id === nodeId) {
        return false;
      }
      node.children = this.removeNode(node.children, nodeId);
      return true;
    });
  }

  // 更新节点内容
  static updateNodeContent(nodes: MindNode[], nodeId: string, content: string): MindNode[] {
    return nodes.map(node => {
      if (node.id === nodeId) {
        return { ...node, content };
      }
      if (node.children.length > 0) {
        return {
          ...node,
          children: this.updateNodeContent(node.children, nodeId, content),
        };
      }
      return node;
    });
  }

  // 移动节点
  static moveNode(nodes: MindNode[], sourceId: string, targetId: string, position: 'before' | 'after' | 'inside'): MindNode[] {
    let sourceNode: MindNode | null = null;
    let newNodes = this.removeNode(nodes, sourceId);
    
    // 找到被移动的节点
    const findNode = (nodes: MindNode[], id: string): MindNode | null => {
      for (const node of nodes) {
        if (node.id === id) return node;
        const found = findNode(node.children, id);
        if (found) return found;
      }
      return null;
    };

    sourceNode = findNode(nodes, sourceId);
    if (!sourceNode) return nodes;

    // 插入节点到新位置
    const insertNode = (nodes: MindNode[], targetId: string): MindNode[] => {
      return nodes.map(node => {
        if (node.id === targetId) {
          if (position === 'inside') {
            return {
              ...node,
              children: [...node.children, { ...sourceNode!, parent: node.id }],
            };
          }
        }
        return {
          ...node,
          children: insertNode(node.children, targetId),
        };
      });
    };

    return insertNode(newNodes, targetId);
  }

  // 展开/折叠节点
  static toggleNode(nodes: MindNode[], nodeId: string): MindNode[] {
    return nodes.map(node => {
      if (node.id === nodeId) {
        return { ...node, expanded: !node.expanded };
      }
      if (node.children.length > 0) {
        return {
          ...node,
          children: this.toggleNode(node.children, nodeId),
        };
      }
      return node;
    });
  }
}
